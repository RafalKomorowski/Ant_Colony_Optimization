//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/myLib")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Twice", ReplyAction="http://tempuri.org/IService1/TwiceResponse")]
        int Twice(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Twice", ReplyAction="http://tempuri.org/IService1/TwiceResponse")]
        System.Threading.Tasks.Task<int> TwiceAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenerownieGrafu", ReplyAction="http://tempuri.org/IService1/GenerownieGrafuResponse")]
        int[] GenerownieGrafu(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenerownieGrafu", ReplyAction="http://tempuri.org/IService1/GenerownieGrafuResponse")]
        System.Threading.Tasks.Task<int[]> GenerownieGrafuAsync(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AktualizujFeromon", ReplyAction="http://tempuri.org/IService1/AktualizujFeromonResponse")]
        void AktualizujFeromon(int[] sciazka, double dlugoscTrasy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AktualizujFeromon", ReplyAction="http://tempuri.org/IService1/AktualizujFeromonResponse")]
        System.Threading.Tasks.Task AktualizujFeromonAsync(int[] sciazka, double dlugoscTrasy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AktualizujFeromonNew", ReplyAction="http://tempuri.org/IService1/AktualizujFeromonNewResponse")]
        double[] AktualizujFeromonNew(int[] TablicaSciezekPolaczone, double[] tablicaDlugosciSciezek, int liczbaMrowek, int iloscWatkow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AktualizujFeromonNew", ReplyAction="http://tempuri.org/IService1/AktualizujFeromonNewResponse")]
        System.Threading.Tasks.Task<double[]> AktualizujFeromonNewAsync(int[] TablicaSciezekPolaczone, double[] tablicaDlugosciSciezek, int liczbaMrowek, int iloscWatkow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocGraf", ReplyAction="http://tempuri.org/IService1/ZwrocGrafResponse")]
        int[] ZwrocGraf();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocGraf", ReplyAction="http://tempuri.org/IService1/ZwrocGrafResponse")]
        System.Threading.Tasks.Task<int[]> ZwrocGrafAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocFeromon", ReplyAction="http://tempuri.org/IService1/ZwrocFeromonResponse")]
        double[] ZwrocFeromon();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocFeromon", ReplyAction="http://tempuri.org/IService1/ZwrocFeromonResponse")]
        System.Threading.Tasks.Task<double[]> ZwrocFeromonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocLiczbeIteracji", ReplyAction="http://tempuri.org/IService1/ZwrocLiczbeIteracjiResponse")]
        int ZwrocLiczbeIteracji();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocLiczbeIteracji", ReplyAction="http://tempuri.org/IService1/ZwrocLiczbeIteracjiResponse")]
        System.Threading.Tasks.Task<int> ZwrocLiczbeIteracjiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocMiastoStartowe", ReplyAction="http://tempuri.org/IService1/ZwrocMiastoStartoweResponse")]
        int ZwrocMiastoStartowe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocMiastoStartowe", ReplyAction="http://tempuri.org/IService1/ZwrocMiastoStartoweResponse")]
        System.Threading.Tasks.Task<int> ZwrocMiastoStartoweAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocLiczbeMrowek", ReplyAction="http://tempuri.org/IService1/ZwrocLiczbeMrowekResponse")]
        int ZwrocLiczbeMrowek();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocLiczbeMrowek", ReplyAction="http://tempuri.org/IService1/ZwrocLiczbeMrowekResponse")]
        System.Threading.Tasks.Task<int> ZwrocLiczbeMrowekAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocAlfa", ReplyAction="http://tempuri.org/IService1/ZwrocAlfaResponse")]
        double ZwrocAlfa();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocAlfa", ReplyAction="http://tempuri.org/IService1/ZwrocAlfaResponse")]
        System.Threading.Tasks.Task<double> ZwrocAlfaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocBeta", ReplyAction="http://tempuri.org/IService1/ZwrocBetaResponse")]
        double ZwrocBeta();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZwrocBeta", ReplyAction="http://tempuri.org/IService1/ZwrocBetaResponse")]
        System.Threading.Tasks.Task<double> ZwrocBetaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/startRysowanie", ReplyAction="http://tempuri.org/IService1/startRysowanieResponse")]
        void startRysowanie();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/startRysowanie", ReplyAction="http://tempuri.org/IService1/startRysowanieResponse")]
        System.Threading.Tasks.Task startRysowanieAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/startObliczen", ReplyAction="http://tempuri.org/IService1/startObliczenResponse")]
        int startObliczen();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/startObliczen", ReplyAction="http://tempuri.org/IService1/startObliczenResponse")]
        System.Threading.Tasks.Task<int> startObliczenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PrzeslijDaneDoZapisu", ReplyAction="http://tempuri.org/IService1/PrzeslijDaneDoZapisuResponse")]
        void PrzeslijDaneDoZapisu(bool czyOptymalna, int iteracja, double czas, double dlugoscTrasy, string sciezka, int liczbaMiast, int liczbaIteracji, int liczbaMrowek, double alfaparm, double betaParm, string Ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PrzeslijDaneDoZapisu", ReplyAction="http://tempuri.org/IService1/PrzeslijDaneDoZapisuResponse")]
        System.Threading.Tasks.Task PrzeslijDaneDoZapisuAsync(bool czyOptymalna, int iteracja, double czas, double dlugoscTrasy, string sciezka, int liczbaMiast, int liczbaIteracji, int liczbaMrowek, double alfaparm, double betaParm, string Ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PrzeslijStatystyke", ReplyAction="http://tempuri.org/IService1/PrzeslijStatystykeResponse")]
        void PrzeslijStatystyke(int iteracjaZnalezienia, double czasZnalezienia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PrzeslijStatystyke", ReplyAction="http://tempuri.org/IService1/PrzeslijStatystykeResponse")]
        System.Threading.Tasks.Task PrzeslijStatystykeAsync(int iteracjaZnalezienia, double czasZnalezienia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        Client.ServiceReference1.CompositeType GetDataUsingDataContract(Client.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference1.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.ServiceReference1.IService1>, Client.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public int Twice(int value) {
            return base.Channel.Twice(value);
        }
        
        public System.Threading.Tasks.Task<int> TwiceAsync(int value) {
            return base.Channel.TwiceAsync(value);
        }
        
        public int[] GenerownieGrafu(int i) {
            return base.Channel.GenerownieGrafu(i);
        }
        
        public System.Threading.Tasks.Task<int[]> GenerownieGrafuAsync(int i) {
            return base.Channel.GenerownieGrafuAsync(i);
        }
        
        public void AktualizujFeromon(int[] sciazka, double dlugoscTrasy) {
            base.Channel.AktualizujFeromon(sciazka, dlugoscTrasy);
        }
        
        public System.Threading.Tasks.Task AktualizujFeromonAsync(int[] sciazka, double dlugoscTrasy) {
            return base.Channel.AktualizujFeromonAsync(sciazka, dlugoscTrasy);
        }
        
        public double[] AktualizujFeromonNew(int[] TablicaSciezekPolaczone, double[] tablicaDlugosciSciezek, int liczbaMrowek, int iloscWatkow) {
            return base.Channel.AktualizujFeromonNew(TablicaSciezekPolaczone, tablicaDlugosciSciezek, liczbaMrowek, iloscWatkow);
        }
        
        public System.Threading.Tasks.Task<double[]> AktualizujFeromonNewAsync(int[] TablicaSciezekPolaczone, double[] tablicaDlugosciSciezek, int liczbaMrowek, int iloscWatkow) {
            return base.Channel.AktualizujFeromonNewAsync(TablicaSciezekPolaczone, tablicaDlugosciSciezek, liczbaMrowek, iloscWatkow);
        }
        
        public int[] ZwrocGraf() {
            return base.Channel.ZwrocGraf();
        }
        
        public System.Threading.Tasks.Task<int[]> ZwrocGrafAsync() {
            return base.Channel.ZwrocGrafAsync();
        }
        
        public double[] ZwrocFeromon() {
            return base.Channel.ZwrocFeromon();
        }
        
        public System.Threading.Tasks.Task<double[]> ZwrocFeromonAsync() {
            return base.Channel.ZwrocFeromonAsync();
        }
        
        public int ZwrocLiczbeIteracji() {
            return base.Channel.ZwrocLiczbeIteracji();
        }
        
        public System.Threading.Tasks.Task<int> ZwrocLiczbeIteracjiAsync() {
            return base.Channel.ZwrocLiczbeIteracjiAsync();
        }
        
        public int ZwrocMiastoStartowe() {
            return base.Channel.ZwrocMiastoStartowe();
        }
        
        public System.Threading.Tasks.Task<int> ZwrocMiastoStartoweAsync() {
            return base.Channel.ZwrocMiastoStartoweAsync();
        }
        
        public int ZwrocLiczbeMrowek() {
            return base.Channel.ZwrocLiczbeMrowek();
        }
        
        public System.Threading.Tasks.Task<int> ZwrocLiczbeMrowekAsync() {
            return base.Channel.ZwrocLiczbeMrowekAsync();
        }
        
        public double ZwrocAlfa() {
            return base.Channel.ZwrocAlfa();
        }
        
        public System.Threading.Tasks.Task<double> ZwrocAlfaAsync() {
            return base.Channel.ZwrocAlfaAsync();
        }
        
        public double ZwrocBeta() {
            return base.Channel.ZwrocBeta();
        }
        
        public System.Threading.Tasks.Task<double> ZwrocBetaAsync() {
            return base.Channel.ZwrocBetaAsync();
        }
        
        public void startRysowanie() {
            base.Channel.startRysowanie();
        }
        
        public System.Threading.Tasks.Task startRysowanieAsync() {
            return base.Channel.startRysowanieAsync();
        }
        
        public int startObliczen() {
            return base.Channel.startObliczen();
        }
        
        public System.Threading.Tasks.Task<int> startObliczenAsync() {
            return base.Channel.startObliczenAsync();
        }
        
        public void PrzeslijDaneDoZapisu(bool czyOptymalna, int iteracja, double czas, double dlugoscTrasy, string sciezka, int liczbaMiast, int liczbaIteracji, int liczbaMrowek, double alfaparm, double betaParm, string Ip) {
            base.Channel.PrzeslijDaneDoZapisu(czyOptymalna, iteracja, czas, dlugoscTrasy, sciezka, liczbaMiast, liczbaIteracji, liczbaMrowek, alfaparm, betaParm, Ip);
        }
        
        public System.Threading.Tasks.Task PrzeslijDaneDoZapisuAsync(bool czyOptymalna, int iteracja, double czas, double dlugoscTrasy, string sciezka, int liczbaMiast, int liczbaIteracji, int liczbaMrowek, double alfaparm, double betaParm, string Ip) {
            return base.Channel.PrzeslijDaneDoZapisuAsync(czyOptymalna, iteracja, czas, dlugoscTrasy, sciezka, liczbaMiast, liczbaIteracji, liczbaMrowek, alfaparm, betaParm, Ip);
        }
        
        public void PrzeslijStatystyke(int iteracjaZnalezienia, double czasZnalezienia) {
            base.Channel.PrzeslijStatystyke(iteracjaZnalezienia, czasZnalezienia);
        }
        
        public System.Threading.Tasks.Task PrzeslijStatystykeAsync(int iteracjaZnalezienia, double czasZnalezienia) {
            return base.Channel.PrzeslijStatystykeAsync(iteracjaZnalezienia, czasZnalezienia);
        }
        
        public Client.ServiceReference1.CompositeType GetDataUsingDataContract(Client.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
